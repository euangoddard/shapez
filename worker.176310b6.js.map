{"mappings":"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","sources":["src/shapes.ts","src/hsla.ts","src/manager.ts","src/worker.ts","src/message.types.ts"],"sourcesContent":["import { RGBAColour } from './hsla';\n\nconst RADIUS = {\n  MIN: 10,\n  MAX: 100,\n};\n\nexport abstract class PolyShape {\n  protected readonly x: number;\n  protected readonly y: number;\n  protected readonly radius: number;\n  protected readonly angle: number;\n  protected abstract klass: typeof Polygon | typeof Polystar;\n  private alpha = 1;\n\n  static random(\n    ctx: OffscreenCanvasRenderingContext2D,\n    colour: RGBAColour,\n    coordinates: Coordinates,\n  ): Polygon | Polystar {\n    let shape: typeof Polygon | typeof Polystar;\n    let vertices: number;\n    const styleChoice = Math.random();\n    if (styleChoice < 0.5) {\n      shape = Polygon;\n      vertices = 3 + Math.round(Math.random() * 6);\n    } else {\n      shape = Polystar;\n      vertices = 4 + Math.round(Math.random() * 7);\n    }\n    return new shape(ctx, colour, vertices, coordinates);\n  }\n\n  constructor(\n    protected readonly ctx: OffscreenCanvasRenderingContext2D,\n    protected readonly colour: RGBAColour,\n    protected readonly vertices: number,\n    coordinates: Coordinates,\n  ) {\n    this.x = coordinates.x;\n    this.y = coordinates.y;\n    this.radius = coordinates.radius;\n    this.angle = coordinates.angle;\n  }\n\n  get isVisible(): boolean {\n    return this.alpha > 0.01;\n  }\n\n  clone(coordinates: Coordinates): Polygon | Polystar {\n    return new this.klass(this.ctx, this.colour, this.vertices, coordinates);\n  }\n\n  draw(): void {\n    this.ctx.beginPath();\n    this.drawVertices();\n    this.ctx.fillStyle = this.fillStyle;\n    this.ctx.fill();\n\n    this.ctx.beginPath();\n    this.setStrokeStyles();\n    this.drawVertices();\n    this.ctx.closePath();\n    this.ctx.stroke();\n\n    this.fade();\n  }\n\n  private get fillStyle(): string {\n    const alpha = this.colour.a * this.alpha;\n    return `rgba(${this.colour.r}, ${this.colour.g}, ${this.colour.b} , ${alpha})`;\n  }\n\n  get isFadedOut(): boolean {\n    return this.alpha < 0.01;\n  }\n\n  private fade() {\n    this.alpha = this.alpha *= 0.90;\n  }\n\n  protected abstract drawVertices(): void;\n\n  private setStrokeStyles() {\n    this.ctx.strokeStyle = `rgba(255, 255, 255, ${this.alpha})`;\n    this.ctx.lineWidth = 3;\n    this.ctx.lineCap = 'round';\n  }\n}\n\nclass Polygon extends PolyShape {\n  protected readonly klass = Polygon;\n\n  protected drawVertices() {\n    var x, y, angle;\n    for (let i = 0; i < this.vertices; i += 1) {\n      angle = this.angle + (2 * Math.PI * i) / this.vertices;\n      x = this.x + this.radius * Math.cos(angle);\n      y = this.y + this.radius * Math.sin(angle);\n\n      if (i === 0) {\n        this.ctx.moveTo(x, y);\n      } else {\n        this.ctx.lineTo(x, y);\n      }\n    }\n  }\n}\n\nclass Polystar extends PolyShape {\n  protected readonly klass = Polystar;\n\n  protected drawVertices(): void {\n    const points = this.vertices * 2;\n    let x: number;\n    let y: number;\n    let radius: number;\n    let angle: number;\n    for (let i = 0; i < points; i += 1) {\n      angle = this.angle + (2 * Math.PI * i) / points;\n      if (i % 2) {\n        radius = 0.6 * this.radius;\n      } else {\n        radius = this.radius;\n      }\n\n      x = this.x + radius * Math.cos(angle);\n      y = this.y + radius * Math.sin(angle);\n\n      if (i === 0) {\n        this.ctx.moveTo(x, y);\n      } else {\n        this.ctx.lineTo(x, y);\n      }\n    }\n  }\n}\n\nexport class Coordinates {\n  static initial(x: number, y: number): Coordinates {\n    return new Coordinates(x, y, RADIUS.MIN, 0);\n  }\n\n  static fromPrevious(x: number, y: number, previous: Coordinates): Coordinates {\n    const deltaX = previous.x - x;\n    const deltaY = previous.y - y;\n    const deltaR = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n    const radius = Math.min(Math.max(deltaR, RADIUS.MIN), RADIUS.MAX);\n    const angle = Math.atan(deltaX / deltaY);\n    return new Coordinates(x, y, radius, angle);\n  }\n\n  constructor(public x: number, public y: number, public radius: number, public angle: number) {}\n}\n","export interface RGBAColour {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function convertHSLAToRGBA(h: number, s: number, l: number, a: number): RGBAColour {\n  let rgba: RGBAColour;\n  h = convertToPercent(Math.round(h) % 360, 360);\n  s = convertToPercent(Math.round(s) % 101, 100);\n  l = convertToPercent(Math.round(l) % 101, 100);\n\n  if (s === 0) {\n    const value = Math.round(Math.round(255 * l));\n    rgba = {\n      r: value,\n      g: value,\n      b: value,\n      a: a,\n    };\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    rgba = {\n      r: parseInt((convertHueToRGB(p, q, h + 1 / 3) * 256).toFixed(0), 10),\n      g: parseInt((convertHueToRGB(p, q, h) * 256).toFixed(0), 10),\n      b: parseInt((convertHueToRGB(p, q, h - 1 / 3) * 256).toFixed(0), 10),\n      a: a,\n    };\n  }\n  return rgba;\n}\n\nfunction convertToPercent(amount: number, limit: number): number {\n  return amount / limit;\n}\n\nvar convertHueToRGB = function(p: number, q: number, t: number): number {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n","import { PolyShape, Coordinates } from './shapes';\nimport { convertHSLAToRGBA, RGBAColour } from './hsla';\n\nexport class Manager {\n  private readonly dataById: { [id: string]: ManagedItem } = {};\n\n  constructor(\n    private ctx: OffscreenCanvasRenderingContext2D,\n    private width: number,\n    private height: number,\n  ) {}\n\n  addNewShape(shapeId: number, x: number, y: number): void {\n    const currentTime = new Date().getTime();\n    const colour = convertHSLAToRGBA(currentTime % 360, 100, 50, 1);\n    const coordinates = Coordinates.initial(x, y);\n    const shape = PolyShape.random(this.ctx, colour, coordinates);\n    this.dataById[`${shapeId}`] = {\n      shapes: [shape],\n      lastCoordinates: coordinates,\n    };\n  }\n\n  cloneShape(shapeId: number, x: number, y: number): void {\n    const { shapes, lastCoordinates } = this.dataById[`${shapeId}`];\n    if (!shapes) {\n      return;\n    }\n\n    const coordinates = Coordinates.fromPrevious(x, y, lastCoordinates);\n    const shape = last(shapes).clone(coordinates);\n    shapes.push(shape);\n    this.dataById[`${shapeId}`].lastCoordinates = coordinates;\n  }\n\n  updateScreenSize(width: number, height: number): void {\n    this.width = width;\n    this.height = height;\n  }\n\n  drawAll(): void {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    for (const id in this.dataById) {\n      const { shapes } = this.dataById[id];\n      const visibleShapes: PolyShape[] = [];\n      shapes.forEach(shape => {\n        shape.draw();\n        if (shape.isVisible) {\n          visibleShapes.push(shape);\n        }\n      });\n      this.dataById[id].shapes = visibleShapes;\n    }\n  }\n}\n\nexport interface ManagedItem {\n  shapes: PolyShape[];\n  lastCoordinates: Coordinates;\n}\n\nfunction last<T>(array: T[]): T {\n  return array[array.length - 1];\n}\n","import { Manager } from './manager';\nimport { WorkerMessageTypes } from './message.types';\n\nlet canvas: OffscreenCanvas;\nlet manager: Manager;\n\nonmessage = function(event) {\n  const data = event.data;\n  switch (data.type as WorkerMessageTypes) {\n    case WorkerMessageTypes.Init:\n      canvas = data.canvas;\n      const ctx = canvas.getContext('2d')!;\n      manager = new Manager(ctx, data.width, data.height);\n      tick();\n      break;\n    case WorkerMessageTypes.UpdateSize:\n      canvas.width = data.width;\n      canvas.height = data.height;\n      manager.updateScreenSize(data.width, data.height);\n      break;\n    case WorkerMessageTypes.AddShape:\n      manager.addNewShape(data.identifier, data.x, data.y);\n      break;\n    case WorkerMessageTypes.CloneShape:\n      manager.cloneShape(data.identifier, data.x, data.y);\n      break;\n  }\n};\n\nfunction tick() {\n  requestAnimationFrame(() => {\n    tick();\n    manager?.drawAll();\n  });\n}\n","export const enum WorkerMessageTypes {\n  Init,\n  UpdateSize,\n  AddShape,\n  CloneShape,\n}\n"],"names":["$69e88c3f1870e96f$var$RADIUS","$69e88c3f1870e96f$export$567a7c9b7666957e","ctx","colour","coordinates","shape","vertices","Math","random","$69e88c3f1870e96f$var$Polygon","round","$69e88c3f1870e96f$var$Polystar","isVisible","this","alpha","clone","klass","draw","beginPath","drawVertices","fillStyle","fill","setStrokeStyles","closePath","stroke","fade","a","r","g","b","isFadedOut","strokeStyle","lineWidth","lineCap","x","y","radius","angle","i","PI","cos","sin","moveTo","lineTo","points","$69e88c3f1870e96f$export$d6e0f5996cc55599","previous","deltaX","deltaY","deltaR","sqrt","min","max","atan","$6fe7083c14017090$var$convertToPercent","amount","limit","$6fe7083c14017090$var$convertHueToRGB","p","q","t","$e0a5d94336d07c6c$export$d0d38e7dec7a1a61","addNewShape","shapeId","h","s","l","rgba","value","parseInt","toFixed","$6fe7083c14017090$export$95406402fd9dc4b2","Date","getTime","initial","dataById","shapes","lastCoordinates","cloneShape","fromPrevious","array","length","push","updateScreenSize","width","height","drawAll","clearRect","id","visibleShapes","forEach","$10a40071e78419f3$var$canvas","$10a40071e78419f3$var$manager","$10a40071e78419f3$var$tick","requestAnimationFrame","$f2b9fa6427fc01e9$export$2f5eea4b9ec04e82","onmessage","event","data","type","Init","canvas","getContext","UpdateSize","AddShape","identifier","CloneShape"],"version":3,"file":"worker.176310b6.js.map"}