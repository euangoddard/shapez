{"version":3,"sources":["utils.ts","message.types.ts","worker.client.ts","main.ts"],"names":[],"mappings":";AAEC,aAFK,SAAU,EAAQ,EAAwB,GACvC,OAAA,MAAM,UAAU,QAAQ,KAAK,EAAU,GAC/C,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA;;ACFD,aAAA,IAAkB,EAAlB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,wBAAA,EAAA,QAAA,mBAAA,EAAA,SAAkB,GAChB,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,WAAA,GAAA,aACA,EAAA,EAAA,SAAA,GAAA,WACA,EAAA,EAAA,WAAA,GAAA,aAJF,CAAkB,IAAA,QAAA,mBAAA,EAAkB;;ACEX,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAFzB,IAAA,EAAA,QAAA,mBAEM,MAAO,EAGX,cACO,KAAA,OAAS,IAAI,OAAO,wCAG3B,iBAAiB,EAA2B,EAAe,GACnD,MAAA,EAAY,EAAO,6BACpB,KAAA,OAAO,YACV,CACE,KAAM,EAAmB,mBAAA,KACzB,OAAQ,EACR,MAAA,EACA,OAAA,GAEF,CAAE,IAIN,WAAW,EAAe,GACnB,KAAA,OAAO,YAAY,CACtB,KAAM,EAAmB,mBAAA,WACzB,MAAA,EACA,OAAA,IAIJ,SAAS,EAAoB,EAAW,GACjC,KAAA,OAAO,YAAY,CACtB,KAAM,EAAmB,mBAAA,SACzB,WAAA,EACA,EAAA,EACA,EAAA,IAIJ,WAAW,EAAoB,EAAW,GACnC,KAAA,OAAO,YAAY,CACtB,KAAM,EAAmB,mBAAA,WACzB,WAAA,EACA,EAAA,EACA,EAAA,KA1CmB,QAAA,aAAA;;ACMzB,aARA,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,mBAEA,MAAM,EAA2B,CAC/B,SAAS,EACT,SAAS,IAGX,WACQ,MAAA,EAAe,IAAI,EAAJ,aACf,EAAS,SAAS,cAAc,UAG7B,SAAA,IACP,EAAa,WAAW,OAAO,WAAY,OAAO,aAHpD,EAAa,iBAAiB,EAAQ,OAAO,WAAY,OAAO,aAKhE,OAAO,iBAAiB,SAAU,EAAY,GAC9C,IAEA,EAAO,iBACL,aACC,IACC,EAAM,iBACN,KACK,EAAA,EAAA,MAAA,EAAM,eAAgB,IACzB,EAAa,SAAS,EAAM,WAAY,EAAM,MAAO,EAAM,WAG/D,GAEF,EAAO,iBACL,YACC,IACC,EAAM,kBACD,EAAA,EAAA,MAAA,EAAM,eAAgB,IACzB,EAAa,WAAW,EAAM,WAAY,EAAM,MAAO,EAAM,WAGjE,GAGE,IAAA,GAAc,EAwBT,SAAA,IACM,SAAS,cAAc,cAC/B,UAAU,IAAI,SAzBrB,EAAO,iBACL,YACA,IACE,IACA,GAAc,EACd,EAAa,UAAU,EAAG,EAAM,MAAO,EAAM,QAE/C,GAEF,EAAO,iBACL,YACA,IACM,GACF,EAAa,YAAY,EAAG,EAAM,MAAO,EAAM,QAGnD,GAGF,EAAO,iBAAiB,UAAW,IAAO,GAAc,EAAQ,GAEhE,EAAO,iBAAiB,aAAc,IAAO,GAAc,EAAQ,GAvDrE","file":"main.01a9b15c.js","sourceRoot":"../src","sourcesContent":["export function iter<T>(iterable: ArrayLike<T>, callback: (element: T) => void) {\n  return Array.prototype.forEach.call(iterable, callback);\n}\n","export const enum WorkerMessageTypes {\n  Init,\n  UpdateSize,\n  AddShape,\n  CloneShape,\n}\n","import { WorkerMessageTypes } from './message.types';\n\nexport class WorkerClient {\n  private readonly worker: Worker;\n\n  constructor() {\n    this.worker = new Worker('./worker.ts');\n  }\n\n  initializeCanvas(canvas: HTMLCanvasElement, width: number, height: number): void {\n    const offscreen = canvas.transferControlToOffscreen();\n    this.worker.postMessage(\n      {\n        type: WorkerMessageTypes.Init,\n        canvas: offscreen,\n        width,\n        height,\n      },\n      [(offscreen as unknown) as Transferable],\n    );\n  }\n\n  updateSize(width: number, height: number): void {\n    this.worker.postMessage({\n      type: WorkerMessageTypes.UpdateSize,\n      width,\n      height,\n    });\n  }\n\n  addShape(identifier: number, x: number, y: number): void {\n    this.worker.postMessage({\n      type: WorkerMessageTypes.AddShape,\n      identifier,\n      x,\n      y,\n    });\n  }\n\n  cloneShape(identifier: number, x: number, y: number): void {\n    this.worker.postMessage({\n      type: WorkerMessageTypes.CloneShape,\n      identifier,\n      x,\n      y,\n    });\n  }\n}\n","import { iter } from './utils';\nimport { WorkerClient } from './worker.client';\n\nconst PASSIVE_NO_CAPTURE_FLAGS = {\n  capture: false,\n  passive: true,\n};\n\n(function() {\n  const workerClient = new WorkerClient();\n  const canvas = document.querySelector('canvas') as HTMLCanvasElement;\n  workerClient.initializeCanvas(canvas, window.innerWidth, window.innerHeight);\n\n  function sizeCanvas() {\n    workerClient.updateSize(window.innerWidth, window.innerHeight);\n  }\n  window.addEventListener('resize', sizeCanvas, PASSIVE_NO_CAPTURE_FLAGS);\n  sizeCanvas();\n\n  canvas.addEventListener(\n    'touchstart',\n    (event: TouchEvent) => {\n      event.preventDefault();\n      removeInfo();\n      iter(event.changedTouches, touch => {\n        workerClient.addShape(touch.identifier, touch.pageX, touch.pageY);\n      });\n    },\n    false,\n  );\n  canvas.addEventListener(\n    'touchmove',\n    (event: TouchEvent) => {\n      event.preventDefault();\n      iter(event.changedTouches, touch => {\n        workerClient.cloneShape(touch.identifier, touch.pageX, touch.pageY);\n      });\n    },\n    false,\n  );\n\n  let isMouseDown = false;\n  canvas.addEventListener(\n    'mousedown',\n    event => {\n      removeInfo();\n      isMouseDown = true;\n      workerClient.addShape(-1, event.pageX, event.pageY);\n    },\n    PASSIVE_NO_CAPTURE_FLAGS,\n  );\n  canvas.addEventListener(\n    'mousemove',\n    event => {\n      if (isMouseDown) {\n        workerClient.cloneShape(-1, event.pageX, event.pageY);\n      }\n    },\n    PASSIVE_NO_CAPTURE_FLAGS,\n  );\n\n  canvas.addEventListener('mouseup', () => (isMouseDown = false), PASSIVE_NO_CAPTURE_FLAGS);\n\n  canvas.addEventListener('mouseleave', () => (isMouseDown = false), PASSIVE_NO_CAPTURE_FLAGS);\n\n  function removeInfo() {\n    const text = document.querySelector('.info-text') as HTMLElement;\n    text.classList.add('faded');\n  }\n})();\n"]}